# (all.death$sex == 0 & all.death$agecat == 1) *1 +
# (all.death$sex == 0 & all.death$agecat == 2) *2 +
# (all.death$sex == 0 & all.death$agecat == 3) *3 +
# (all.death$sex == 0 & all.death$agecat == 4) *4 +
# (all.death$sex == 1 & all.death$agecat == 1) *5 +
# (all.death$sex == 1 & all.death$agecat == 2) *6 +
# (all.death$sex == 1 & all.death$agecat == 3) *7 +
# (all.death$sex == 1 & all.death$agecat == 4) *8
sample.control = data.frame()
sample.death = data.frame()
for (i in 1:8){
group = all.death[all.death$stratum == i,]
group.sex = as.numeric(group[1,"sex"])
group.agecat = as.numeric(group[1,"agecat"])
pot.control = alive[(alive$sex == group.sex) & (alive$agecat == group.agecat),]
if (nrow(group) > nrow(pot.control)){
group = sample_n(group, nrow(pot.control))
}
set.seed(i+1)
group.sample = sample_n(pot.control, nrow(group))
group.sample$stratum = i
sample.control = rbind(sample.control, group.sample)
sample.death = rbind(sample.death, group)
}
case.control = rbind(sample.control, sample.death)
# Data cleaning for case.control dataset
case.control = case.control[-c(16)]
case.control = rbind(sample.control, sample.death)
hyp.cond.model10 = clogit(death ~ prevhyp + agecat*prevhyp, data = case.control)
summary(hyp.cond.model10)
hyp.cond.model10 = clogit(death ~ prevhyp + agecat*prevhyp + strata(stratum), data = case.control)
summary(hyp.cond.model10)
hyp.cond.model11 = clogit(death ~ prevhyp + sex* prevhyp + strata(stratum), data = case.control)
summary(hyp.cond.model11)
View(hyp.cond.model7)
#setwd("C:/Users/eilee/Downloads")
framingham <- read_dta(file=file.choose())
dat<-frimingham[(frimingham$prevap==0 & frimingham$prevchd==0 & frimingham$prevmi==0 & frimingham$prevstrk==0),]
dat<-framingham[(framingham$prevap==0 & framingham$prevchd==0 & framingham$prevmi==0 & framingham$prevstrk==0),]
dat$sex<- dat$sex - 1
dat<-dat%>% drop_na(bpmeds)
dat$sex = as.factor(dat$sex)
dat$prevhyp = as.factor(dat$prevhyp)
dat$agecat = as.factor(dat$agecat)
dat$bpmeds = as.factor(dat$bpmeds)
dat$diabetes = as.factor(dat$diabetes)
modlogit.opt<-glm(death~ sex + sysbp + diabp + cursmoke + cigpday +
diabetes + bpmeds + glucose + prevhyp + agecat + sex*prevhyp, family = binomial(),
data = datsub)
datsub<-dat[c(1,2,4:12,17,18,35)]
datsub<-na.omit(datsub)
modlogit.full<-glm(death ~.,family=binomial(),data=datsub)
modlogit.step<-step(modlogit.full,trace=0)
summary(modlogit.step)
modlogit<-glm(death~prevhyp,family=binomial(),data=datsub)
summary(modlogit)
exp(coef(modlogit))
modlogit.agecat<-glm(death~prevhyp+agecat,family=binomial(),data=datsub)
summary(modlogit.agecat)
modlogit.agecat.emm<-glm(death~prevhyp*agecat,family=binomial(),data=datsub)
summary(modlogit.agecat.emm)
modlogit.sex<-glm(death~prevhyp+sex,family=binomial(),data=datsub)
summary(modlogit.sex)
modlogit.sex.emm<-glm(death~prevhyp*sex,family=binomial(),data=datsub)
summary(modlogit.sex.emm)
modlogit.test.interact<-glm(death~ prevhyp + agecat + sex*prevhyp, family = binomial(),
data = datsub)
summary(modlogit.test.interact)
modlogit.test<-glm(death~ prevhyp + agecat + sex, family = binomial(),
data = datsub)
summary(modlogit.test)
anova(modlogit.test.interact,modlogit.test,test="Chisq")
exp(coef(modlogit.test))
modlogit.opt<-glm(death~ sex + sysbp + diabp + cursmoke + cigpday +
diabetes + bpmeds + glucose + prevhyp + agecat + sex*prevhyp, family = binomial(),
data = datsub)
summary(modlogit.opt)
anova(modlogit.step,modlogit.opt, test="Chisq")
exp(coef(modlogit.step))
library(ROCR)
library("ROCR")
install.packages("ROCR")
exp(coef(modlogit.step))
library(ROCR)
library(ResourceSelection)
library(LogisticDx)
fitted.logit_death=predict(modlogit.step,newdata = datsub,type = 'response')
pred <- prediction(fitted.logit_death, datsub$death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T)
gof(modlogit.step)
pred
exp(coef(modlogit.step))
library(ROCR)
library(ResourceSelection)
library(LogisticDx)
fitted.logit_death=predict(modlogit.step,newdata = datsub,type = 'response')
pred <- prediction(fitted.logit_death, datsub$death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T)
gof(modlogit.step)
library(survival)
library(survminer)
install.packages("survminer")
library(survival)
library(survminer)
dat$survobject = Surv(dat$timedth,dat$death)
datsub.sur<-dat[c(1,2,4:12,17,35,37)]
datsub.sur<-na.omit(datsub.sur)
modsur.full <- coxph(survobject~.,data=datsub.sur)
summary(modsur.full)
library(survival)
library(survminer)
dat$survobject = Surv(dat$timedth,dat$death)
dat$survobject
datsub.sur<-dat[c(1,2,4:12,17,35,37)]
datsub.sur<-na.omit(datsub.sur)
modsur.full <- coxph(survobject~.,data=datsub.sur)
summary(modsur.full)
library(survival)
library(survminer)
dat$survobject = Surv(dat$timedth,dat$death)
datsub.sur<-dat[c(1,2,4:12,17,35,37)]
datsub.sur<-na.omit(datsub.sur)
modsur.full <- coxph(survobject~.,data=datsub.sur)
summary(modsur.full)
modsur.step <-step(modsur.full,trace=0)
summary(modsur.step)
install.packages("survivalROC")
library(survivalROC)
nobs <- NROW(datsub.sur)
cutoff <- 1000
## MAYOSCORE 4, METHOD = NNE
Mayo4.0= survivalROC(Stime=datsub3.sur$timedth,
status=datsub3.sur$death,
marker = predict(modsur.step,datsub.sur,type='lp'),
predict.time = cutoff,span = 0.25*nobs^(-0.20) )
library(survivalROC)
datsub3.sur<-dat[c(18,32,1,2,4:12,17,35,37,32)]
datsub3.sur<-na.omit(datsub3.sur)
datsub3.sur=datsub3.sur[,c(1,2)]
nobs <- NROW(datsub3.sur)
cutoff <- 1000
## MAYOSCORE 4, METHOD = NNE
Mayo4.1= survivalROC(Stime=datsub3.sur$timedth,
status=datsub3.sur$death,
marker = predict(modsur.opt2,datsub2.sur,type='lp'),
predict.time = cutoff,span = 0.25*nobs^(-0.20) )
dat$survobject = Surv(dat$timedth,dat$death)
datsub2.sur<-dat[c(1,2,4:12,17,35,37,32)]
datsub2.sur<-na.omit(datsub2.sur)
datsub2.sur$agecat=as.factor(datsub2.sur$agecat)
datsub2.sur$sex=as.factor(datsub2.sur$sex)
datsub2.sur$diabetes=as.factor(datsub2.sur$diabetes)
datsub2.sur$prevhyp=as.factor(datsub2.sur$prevhyp)
datsub2.sur$bpmeds=as.factor(datsub2.sur$bpmeds)
datsub2.sur$sex_time=(as.numeric(datsub2.sur$sex)-1)*log10(datsub2.sur$timedth)
modsur.opt=coxph(survobject~sex+sex_time+sysbp+diabp+cigpday+diabetes+bpmeds+glucose+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt)
modsur.opt2=coxph(survobject~sex+sex_time+sysbp+cigpday+diabetes+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt2)
test.ph <- cox.zph(modsur.step)
test.ph
library(survivalROC)
nobs <- NROW(datsub.sur)
cutoff <- 1000
## MAYOSCORE 4, METHOD = NNE
Mayo4.0= survivalROC(Stime=datsub3.sur$timedth,
status=datsub3.sur$death,
marker = predict(modsur.step,datsub.sur,type='lp'),
predict.time = cutoff,span = 0.25*nobs^(-0.20) )
plot(Mayo4.0$FP, Mayo4.0$TP, type="l", xlim=c(0,1), ylim=c(0,1),
xlab=paste( "FP", "", "AUC = ",round(Mayo4.0$AUC,3)),
ylab="TP",main="Mayoscore 4, Method = NNE
Year = 1")
abline(0,1)
test.ph <- cox.zph(modsur.step)
test.ph
dat$survobject = Surv(dat$timedth,dat$death)
datsub2.sur<-dat[c(1,2,4:12,17,35,37,32)]
datsub2.sur<-na.omit(datsub2.sur)
datsub2.sur$agecat=as.factor(datsub2.sur$agecat)
datsub2.sur$sex=as.factor(datsub2.sur$sex)
datsub2.sur$diabetes=as.factor(datsub2.sur$diabetes)
datsub2.sur$prevhyp=as.factor(datsub2.sur$prevhyp)
datsub2.sur$bpmeds=as.factor(datsub2.sur$bpmeds)
datsub2.sur$sex_time=(as.numeric(datsub2.sur$sex)-1)*log10(datsub2.sur$timedth)
modsur.opt=coxph(survobject~sex+sex_time+sysbp+diabp+cigpday+diabetes+bpmeds+glucose+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt)
modsur.opt2=coxph(survobject~sex+sex_time+sysbp+cigpday+diabetes+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt2)
datsub2.sur$sex
as.numeric(datsub2.sur$sex)
datsub2.sur$sex
library(foreign)
framingham=read.dta('framingham.dta')
library(foreign)
framingham=read.dta('~/Documents/Class Info/Harvard HSPH/Fall2019/BST210/GroupProject2/Data and Programs/framingham.dta')
framingham2=framingham
framingham2=framingham2[(framingham2$prevchd==0&framingham2$prevap==0&framingham2$prevmi==0&framingham2$prevstrk==0),]
summary(framingham2)
str(framingham2)
dat$survobject = Surv(dat$timedth,dat$death)
datsub2.sur<-dat[c(1,2,4:12,17,35,37,32)]
datsub2.sur<-na.omit(datsub2.sur)
datsub2.sur$agecat=as.factor(datsub2.sur$agecat)
datsub2.sur$sex=as.factor(datsub2.sur$sex)
datsub2.sur$diabetes=as.factor(datsub2.sur$diabetes)
datsub2.sur$prevhyp=as.factor(datsub2.sur$prevhyp)
datsub2.sur$bpmeds=as.factor(datsub2.sur$bpmeds)
datsub2.sur$sex_time=(as.numeric(datsub2.sur$sex)-1)*log(datsub2.sur$timedth)
modsur.opt=coxph(survobject~sex+sex_time+sysbp+diabp+cigpday+diabetes+bpmeds+glucose+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt)
modsur.opt2=coxph(survobject~sex+sex_time+sysbp+cigpday+diabetes+prevhyp+agecat,data = datsub2.sur)
summary(modsur.opt2)
library(survivalROC)
datsub3.sur<-dat[c(18,32,1,2,4:12,17,35,37,32)]
datsub3.sur<-na.omit(datsub3.sur)
datsub3.sur=datsub3.sur[,c(1,2)]
nobs <- NROW(datsub3.sur)
cutoff <- 1000
## MAYOSCORE 4, METHOD = NNE
Mayo4.1= survivalROC(Stime=datsub3.sur$timedth,
status=datsub3.sur$death,
marker = predict(modsur.opt2,datsub2.sur,type='lp'),
predict.time = cutoff,span = 0.25*nobs^(-0.20) )
plot(Mayo4.1$FP, Mayo4.1$TP, type="l", xlim=c(0,1), ylim=c(0,1),
xlab=paste( "FP", "", "AUC = ",round(Mayo4.1$AUC,3)),
ylab="TP",main="Mayoscore 4, Method = NNE
Year = 1")
abline(0,1)
newdata1=data.frame(sex = factor(c(0,0,1,1)), prevhyp = factor(c(0,1,0,1)),
agecat = factor(c(1,1,1,1)),diabetes = factor(c(0,0,0,0)),
sysbp = rep(mean(datsub2.sur$sysbp, na.rm = TRUE), 4),
sex_time = c(rep(mean(datsub2.sur$sex_time[datsub2.sur$sex==0], na.rm = TRUE),2),rep(mean(datsub2.sur$sex_time[datsub2.sur$sex==1], na.rm = TRUE), 2)),
cigpday = rep(mean(datsub2.sur$cigpday, na.rm = TRUE), 4))
ggsurvplot(survfit(modsur.opt2,newdata =newdata1),data=datsub2.sur)
ggsurvplot(survfit(modsur.opt2,newdata =newdata1),data=datsub2.sur)
ggsurvplot(survfit(modsur.opt2,newdata =newdata1),data=datsub2.sur)
summary(hyp.cond.model.final)
hyp.cond.model.final = clogit(death ~ prevhyp + strata(stratum), data = case.control)
summary(hyp.cond.model.final)
framingham <- read_dta(file=file.choose())
View(framingham)
# Conclusion: no other variables has confounding effect on the effect of prev hyp on incidence of death.
# The odds of death among individuals with previous hypertension is estimated to be 2.16 times of the odds of death among those without hypertension.
hyp.cond.model12 = clogit(death ~ prevhyp + heartrte + strata(stratum), data = case.control)
summary(hyp.cond.model12)
confint((hyp.cond.model.final))
model1  = clogit(deat ~ prevhyp + prevhyp* cursmoke + strata(stratum), data = case.control)
model1  = clogit(death ~ prevhyp + prevhyp* cursmoke + strata(stratum), data = case.control)
summary(model1)
model1  = clogit(death ~ prevhyp + prevhyp* totchol + strata(stratum), data = case.control)
summary(model1)
model1  = clogit(death ~ prevhyp + totchol + strata(stratum), data = case.control)
summary(model1)
dim(case.control)
case.control %>% group_by((stratum))
case.control[case.control$stratum == 0]
case.control[case.control$stratum == 1,]
case.control[case.control$stratum == 2,]
case.control[case.control$stratum == 3,]
msd.MAGD.genreAssignment <- read.delim("~/Documents/Class Info/Harvard HSPH/Fall2019/CS109A/CS109Spotify/msd-MAGD-genreAssignment.txt", header=FALSE)
View(msd.MAGD.genreAssignment)
msd.MAGD.genreAssignment <- read.delim("~/Documents/Class Info/Harvard HSPH/Fall2019/CS109A/CS109Spotify/msd-MAGD-genreAssignment.txt", header=FALSE)
msd.MAGD.genreAssignment
#Lecture 24 R code
#Survival Modeling ______________________________________
##### Part 1: Set up
# Read in srt data and set up
srt <- read.csv("~/Downloads/srt.csv") #View(srt)
head(srt)
srt$sex = factor(srt$sex) srt$sorb = factor(srt$sorb)
# Set up survival analysis library(survival)
library(survminer)
survobj = Surv(srt$fup,srt$status) print(survobj)
survobj = Surv(srt$fup,srt$status)
srt$sex = factor(srt$sex)
srt$sorb = factor(srt$sorb)
# Set up survival analysis library(survival)
library(survminer)
survobj = Surv(srt$fup,srt$status)
library(survival)
survobj = Surv(srt$fup,srt$status)
print(survobj)
print(survobj)
hist(srt$fup)
summary(model1)
##### Part 2: Kaplan-Meier estimate
model1 = survfit(survobj~sorb, data=srt)
summary(model1)
#Plot Kaplan-Meier estimate
ggsurvplot(model1)
##### Part 3: Done in lab: Log-Rank Test
survdiff(survobj~sorb,data=srt) # Test equality of treatment and placebo survival curves
survdiff(survobj~sorb+strata(sex),data=srt) # Test equality, stratified by sex survdiff(survobj~sorb+sex,data=srt) # Test equality of all four curves
survdiff(survobj~sorb+sex,data=srt) # Test equality of all four curves
##### PART 4: Cox Proportional Hazards Models
model4 = coxph(survobj~sorb+tgh+dur+sex, data=srt) plot(survfit(model4))
##### PART 4: Cox Proportional Hazards Models
model4 = coxph(survobj~sorb+tgh+dur+sex, data=srt)
plot(survfit(model4))
summary(model4)
exp(coef(model4))
ggsurvplot(survfit(model4, newdata = with(srt, data.frame(sex = factor(c(1, 1)), sorb = factor(c(0,1)), #tgh = rep(mean(tgh, na.rm = TRUE), 2), dur = rep(mean(dur, na.rm = TRUE), 2)))), data=srt)
ggsurvplot(survfit(model4, newdata = with(srt, data.frame(sex = factor(c(1, 1)), sorb = factor(c(0,1)), tgh = rep(mean(tgh, na.rm = TRUE), 2), dur = rep(mean(dur, na.rm = TRUE), 2)))), data=srt)
##### Part 5: Assessing PH assumption using scaled Schoenfeld residuals then log-log plots.
## Using Schoenfeld residuals
test.ph <- cox.zph(model4)
##### Part 5: Assessing PH assumption using scaled Schoenfeld residuals then log-log plots.
## Using Schoenfeld residuals
test.ph <- cox.zph(model4)
test.ph
test.ph
# Plot 1 parameter at a time plot(test.ph)
# Plot all on 1 page ggcoxzph(test.ph)
## Using Log-Log plots
# First using sorb
model5 = survfit(survobj~sorb, data=srt) ggsurvplot(model5, fun = "cloglog")
# Plot 1 parameter at a time plot(test.ph)
# Plot all on 1 page ggcoxzph(test.ph)
## Using Log-Log plots
# First using sorb
model5 = survfit(survobj~sorb, data=srt)
ggsurvplot(model5, fun = "cloglog")
# Next using sex
model5 = survfit(survobj~sex,data=srt) ggsurvplot(model5, fun = "cloglog")
# Next using sex
model5 = survfit(survobj~sex,data=srt)
ggsurvplot(model5, fun = "cloglog")
##### Part 6: Assessing influence
## First using dfbetas
model4 = coxph(survobj~sorb+tgh+dur+sex, data=srt)
ggcoxdiagnostics(model4, type = "dfbeta",linear.predictions = FALSE, ggtheme = theme_bw())
## Next using deviance residuals
ggcoxdiagnostics(model4, type = "deviance",linear.predictions = FALSE, ggtheme = theme_bw())
?norm
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)# please knit with `echo=TRUE, eval=TRUE`
# your code here
sim_data %>% filter(group == 99655) %>% ggplot(aes(x = X, y = Y)) + geom_point() + ggtitle("Relation between X and Y in the 99655th group")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)# please knit with `echo=TRUE, eval=TRUE`
# these packages are needed for HW2
# affy and affyPLM are needed to read the microarray data and run RMA
library(sva) # for batch effect correction. Contains ComBat and sva.
library(ggplot2) # for plotting
library(dplyr) # for data manipulation
library(reticulate) # needed to run python in Rstudio
# these next two are not essential to this course
library(mvtnorm) # need this to simulate data from multivariate normal
library(HistData) # need this for data
x1 <- c(1:10, 50)
mean(x1)
x1_na <- c(1:10, 50, NA)
mean(x1_na)
# your code here
mean(x1_na, na.rm = TRUE)
data(GaltonFamilies)
head(GaltonFamilies,10)
# your code here
childheight = GaltonFamilies %>% slice(10) %>% select(childHeight)
print(paste("The height of the 10th child in the dataset is ", childheight, "."))
# your code here
n_male = GaltonFamilies %>% filter(gender == "male") %>% summarise(n())
n_female = GaltonFamilies %>% filter(gender == "female") %>% summarise(n())
n_male/n_female
# your code here
n_male = GaltonFamilies %>% filter(gender == "male") %>% summarise(n())
n_female = GaltonFamilies %>% filter(gender == "female") %>% summarise(n())
n_male
n_female
# your code here
GaltonFamilies %>% summarise(n())
# your code here
GaltonFamilies %>% filter(childNum == 1) %>% summarise(mean(childHeight, na.rm = TRUE))
# your code here
merge(GaltonFamilies %>% filter(gender == "male") %>% summarise(mean_height_male = mean(childHeight)) ,
GaltonFamilies %>% filter(gender == "female") %>% summarise(mean_height_female = mean(childHeight)) )
# your code here
GaltonFamilies %>% group_by(family) %>% summarise(m = mean(children))
# your code here
GaltonFamilies %>% mutate(childHeight_cm = childHeight *2.54) %>% head()
# set seed for reproducibility
set.seed(1234)
N <- 25
ngroups <- 100000
sim_data <- data.frame(group = rep(1:ngroups, each = N),
X = rnorm(N * ngroups),
Y = rnorm(N * ngroups))
head(sim_data)
sim_data_sub <- sim_data %>% filter(group <= 100)
Cor_table_sub = sim_data_sub %>% group_by(group) %>% summarise(correlation = cor(X,Y)) %>% arrange(desc(correlation)) %>% head(10)
Cor_table_sub
# your code here
sim_data %>% group_by(group) %>% summarise(correlation = cor(X,Y)) %>% arrange(desc(correlation)) %>% head(10)
# your code here
sim_data %>% filter(group == 99655) %>% ggplot(aes(x = X, y = Y)) + geom_point() + ggtitle("Relation between X and Y in the 99655th group")
N <- 100
Sigma <- matrix(c(1, 0.75, 0.75, 1), nrow = 2, ncol = 2) * 1.5
means <- list(c(11, 3), c(9, 5), c(7, 7), c(5, 9), c(3, 11))
dat <- lapply(means, function(mu)
rmvnorm(N, mu, Sigma))
dat <- as.data.frame(Reduce(rbind, dat)) %>%
mutate(Z = as.character(rep(seq_along(means), each = N)))
names(dat) <- c("X", "Y", "Z")
# your code here
dat %>% summarise(cor_XY = cor(X,Y))
# your code here
dat %>% ggplot(aes(x = X, y = Y)) + geom_point() + ggtitle("Relationship between X and Y")
# your code here
dat %>% group_by(Z) %>% summarise(cor_XY_Y = cor(X,Y))
# your code here
dat %>% ggplot(aes(x = X, y = Y, color = Z)) + geom_point() + ggtitle("Relationship between X and Y")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("sva")
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm",
"reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
install.packages(c("ggplot2", "dplyr", "tidyr", "HistData", "mvtnorm", "reticulate"))
# these packages are needed for HW2
# affy and affyPLM are needed to read the microarray data and run RMA
library(sva) # for batch effect correction. Contains ComBat and sva.
library(ggplot2) # for plotting
library(dplyr) # for data manipulation
library(reticulate) # needed to run python in Rstudio
# these next two are not essential to this course
library(mvtnorm) # need this to simulate data from multivariate normal
library(HistData) # need this for data
x1 <- c(1:10, 50)
mean(x1)
x1_na <- c(1:10, 50, NA)
mean(x1_na)
# your code here
mean(x1_na, na.rm = TRUE)
data(GaltonFamilies)
head(GaltonFamilies,10)
# your code here
childheight = GaltonFamilies %>% slice(10) %>% select(childHeight)
print(paste("The height of the 10th child in the dataset is ", childheight, "."))
# your code here
n_male = GaltonFamilies %>% filter(gender == "male") %>% summarise(n())
n_female = GaltonFamilies %>% filter(gender == "female") %>% summarise(n())
n_male
n_female
# your code here
table(GaltonFamilies$gender)
# your code here
GaltonFamilies %>% summarise(n())
# your code here
GaltonFamilies %>% filter(childNum == 1) %>% summarise(mean(childHeight, na.rm = TRUE))
# your code here
GaltonFamilies %>% group_by(gender) %>% summarise(mean = mean(childHeight))
# your code here
GaltonFamilies %>% select(family, children) group_by(family) %>% summarise(m = mean(children))
# your code here
GaltonFamilies %>% select(family, children) %>% group_by(family) %>% summarise(m = mean(children))
# your code here
GaltonFamilies %>% select(family, children) %>% group_by(family) %>% summarise(m = mean(children)) %>% summarise(avg_n_children = mean(m))
# set seed for reproducibility
set.seed(1234)
N <- 25
ngroups <- 100000
sim_data <- data.frame(group = rep(1:ngroups, each = N),
X = rnorm(N * ngroups),
Y = rnorm(N * ngroups))
head(sim_data)
sim_data_sub <- sim_data %>% filter(group <= 100)
Cor_table_sub = sim_data_sub %>% group_by(group) %>% summarise(correlation = cor(X,Y)) %>% arrange(desc(correlation)) %>% head(10)
Cor_table_sub
# your code here
sim_data %>% group_by(group) %>% summarise(correlation = cor(X,Y)) %>% arrange(desc(correlation)) %>% head(10)
# your code here
sim_data %>% filter(group == 99655) %>% ggplot(aes(x = X, y = Y)) + geom_point() + ggtitle("Relation between X and Y in the 99655th group")
N <- 100
Sigma <- matrix(c(1, 0.75, 0.75, 1), nrow = 2, ncol = 2) * 1.5
means <- list(c(11, 3), c(9, 5), c(7, 7), c(5, 9), c(3, 11))
dat <- lapply(means, function(mu)
rmvnorm(N, mu, Sigma))
dat <- as.data.frame(Reduce(rbind, dat)) %>%
mutate(Z = as.character(rep(seq_along(means), each = N)))
names(dat) <- c("X", "Y", "Z")
# your code here
dat %>% summarise(cor_XY = cor(X,Y))
# your code here
dat %>% ggplot(aes(x = X, y = Y)) + geom_point() + ggtitle("Relationship between X and Y")
# your code here
dat %>% group_by(Z) %>% summarise(cor_XY_Y = cor(X,Y))
# your code here
dat %>% ggplot(aes(x = X, y = Y, color = Z)) + geom_point() + ggtitle("Relationship between X and Y")
A.ds <- c(0.0,0.0425833309242,0.0977599775842,0.156917206121,0.229372691429,0.285565609552,0.308986552749,0.338505124721,0.376918851724,0.405403361924,0.445907450359,0.465981591477,0.498704643049,0.528590140165,0.547986025711,0.551223862143,0.556732186896,0.589410762693,0.585725944721,0.610581231668,0.629381141827,0.65945121341,0.666874220284,0.678729238152,0.698058410036,0.70322427132,0.718019137926,0.748073642989,0.758456512699,0.765548175048,0.78169288143,0.795073418386,0.775183851736,0.769831192195,0.768165574416,0.777830160357,0.781759595093,0.795035613977,0.795389196389,0.798215631901,0.792320367904,0.777151904786,0.789758563255,0.799394239942,0.825959620444,0.829159652466,0.839504717768,0.852871911991,0.860779704814,0.861364561258,0.862389727875,0.86359724517,0.879332774421,0.883746995105,0.890144835362,0.891605864576,0.880753775437,0.871587318177,0.871282659118,0.880669271465,0.886789138126,0.892933466464,0.90244683477,0.903723289517,0.907545982392,0.910436907777,0.905769175175,0.937582697144,0.943233344378,0.946698007263,0.965471231957,0.983646257475,0.985783318471,0.995298910566,1.0,0.99896149065,0.988825461492,0.977381844544,0.946482299753,0.941454313372,0.925974519828,0.905017534574,0.92283897768,0.911557697311,0.897903634338,0.912676263056,0.928331735912,0.906567515339,0.847823911511,0.817177878639,0.785050802454,0.727345707977,0.699839664831,0.64017096488,0.532759744086,0.45725766818,0.370447626439,0.246529221696,0.131906253961,0.0216619262903)
png("analysis/RSeQC/gene_body_cvg/11.1.FF/11.1.FF.geneBodyCoverage.curves.png")
x=1:100
icolor = colorRampPalette(c("#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"))(1)
plot(x,V11.1.FF.ds,type='l',xlab="Gene body percentile (5'->3')", ylab="Coverage",lwd=0.8,col=icolor[1])
dev.off()
A.ds <- c(0.0,0.0425833309242,0.0977599775842,0.156917206121,0.229372691429,0.285565609552,0.308986552749,0.338505124721,0.376918851724,0.405403361924,0.445907450359,0.465981591477,0.498704643049,0.528590140165,0.547986025711,0.551223862143,0.556732186896,0.589410762693,0.585725944721,0.610581231668,0.629381141827,0.65945121341,0.666874220284,0.678729238152,0.698058410036,0.70322427132,0.718019137926,0.748073642989,0.758456512699,0.765548175048,0.78169288143,0.795073418386,0.775183851736,0.769831192195,0.768165574416,0.777830160357,0.781759595093,0.795035613977,0.795389196389,0.798215631901,0.792320367904,0.777151904786,0.789758563255,0.799394239942,0.825959620444,0.829159652466,0.839504717768,0.852871911991,0.860779704814,0.861364561258,0.862389727875,0.86359724517,0.879332774421,0.883746995105,0.890144835362,0.891605864576,0.880753775437,0.871587318177,0.871282659118,0.880669271465,0.886789138126,0.892933466464,0.90244683477,0.903723289517,0.907545982392,0.910436907777,0.905769175175,0.937582697144,0.943233344378,0.946698007263,0.965471231957,0.983646257475,0.985783318471,0.995298910566,1.0,0.99896149065,0.988825461492,0.977381844544,0.946482299753,0.941454313372,0.925974519828,0.905017534574,0.92283897768,0.911557697311,0.897903634338,0.912676263056,0.928331735912,0.906567515339,0.847823911511,0.817177878639,0.785050802454,0.727345707977,0.699839664831,0.64017096488,0.532759744086,0.45725766818,0.370447626439,0.246529221696,0.131906253961,0.0216619262903)
png("analysis/RSeQC/gene_body_cvg/11.1.FF/11.1.FF.geneBodyCoverage.curves.png")
x=1:100
icolor = colorRampPalette(c("#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"))(1)
plot(x,A.ds,type='l',xlab="Gene body percentile (5'->3')", ylab="Coverage",lwd=0.8,col=icolor[1])
dev.off()
A.ds <- c(0.0,0.0425833309242,0.0977599775842,0.156917206121,0.229372691429,0.285565609552,0.308986552749,0.338505124721,0.376918851724,0.405403361924,0.445907450359,0.465981591477,0.498704643049,0.528590140165,0.547986025711,0.551223862143,0.556732186896,0.589410762693,0.585725944721,0.610581231668,0.629381141827,0.65945121341,0.666874220284,0.678729238152,0.698058410036,0.70322427132,0.718019137926,0.748073642989,0.758456512699,0.765548175048,0.78169288143,0.795073418386,0.775183851736,0.769831192195,0.768165574416,0.777830160357,0.781759595093,0.795035613977,0.795389196389,0.798215631901,0.792320367904,0.777151904786,0.789758563255,0.799394239942,0.825959620444,0.829159652466,0.839504717768,0.852871911991,0.860779704814,0.861364561258,0.862389727875,0.86359724517,0.879332774421,0.883746995105,0.890144835362,0.891605864576,0.880753775437,0.871587318177,0.871282659118,0.880669271465,0.886789138126,0.892933466464,0.90244683477,0.903723289517,0.907545982392,0.910436907777,0.905769175175,0.937582697144,0.943233344378,0.946698007263,0.965471231957,0.983646257475,0.985783318471,0.995298910566,1.0,0.99896149065,0.988825461492,0.977381844544,0.946482299753,0.941454313372,0.925974519828,0.905017534574,0.92283897768,0.911557697311,0.897903634338,0.912676263056,0.928331735912,0.906567515339,0.847823911511,0.817177878639,0.785050802454,0.727345707977,0.699839664831,0.64017096488,0.532759744086,0.45725766818,0.370447626439,0.246529221696,0.131906253961,0.0216619262903)
png("analysis/RSeQC/gene_body_cvg/11.1.FF/11.1.FF.geneBodyCoverage.curves.png")
x=1:100
icolor = colorRampPalette(c("#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"))(1)
plot(x,V11.1.FF.ds,type='l',xlab="Gene body percentile (5'->3')", ylab="Coverage",lwd=0.8,col=icolor[1])
dev.off()
